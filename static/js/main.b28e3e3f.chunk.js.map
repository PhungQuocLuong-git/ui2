{"version":3,"sources":["component/Square.js","component/Board.js","component/Game.js","index.js"],"names":["Square","winnerPos","onClick","k","value","winpos","className","indexOf","Board","LEN","squares","temp","i","push","map","j","renderSquare","Game","props","status","useState","setLEN","Array","fill","latestCheck","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","selectedItem","setSelectedItem","sortBy","setSortBy","setWinnerPos","calculateWinner","lastCheck","length","console","log","symbol","dong","arr","num","cot","cheochinh","cheophu","handleSelectItem","step","current","winner","moves","move","desc","toString","handleSetLen","e","target","alert","type","onChange","readOnly","historyTemp","slice","concat","Math","floor","handleClick","reverse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b28e3e3f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\nfunction Square({winnerPos, onClick, k, value}) {\r\n    const winpos = winnerPos\r\n    return (\r\n        <button onClick={onClick} className={winpos.indexOf(k) !== -1 ? \"square win\" : \"square\"}>\r\n            {value}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Square;","import React from 'react';\r\nimport './index.css';\r\nimport Square from './Square';\r\n\r\nfunction Board({LEN, winnerPos, squares, onClick}) {\r\n    const renderSquare = (i) => {\r\n\r\n        return (\r\n            <Square\r\n                key={i}\r\n                k={i}\r\n                winnerPos={winnerPos}\r\n                value={squares[i]}\r\n                onClick={() => onClick(i)}\r\n            />\r\n        );\r\n    }\r\n\r\n    const temp = [];\r\n    for (let i = 0; i < LEN; i++) {\r\n        temp.push(i);\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {\r\n                temp.map(i =>\r\n                (\r\n                    <div key={i + \"abc\"} className=\"board-row\">\r\n                        {\r\n                            temp.map(j => renderSquare(LEN * i + j))\r\n                        }\r\n                    </div>\r\n                )\r\n                )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React, { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport Board from './Board';\r\nimport './index.css';\r\n\r\nfunction Game(props) {\r\n\r\n    const [LEN, setLEN] = useState(5);\r\n\r\n    const [history, setHistory] = useState([\r\n        {\r\n            squares: Array(LEN * LEN).fill(null),\r\n            latestCheck: []\r\n\r\n        }\r\n    ])\r\n\r\n    const [stepNumber, setStepNumber] = useState(0)\r\n    const [xIsNext, setXIsNext] = useState(true)\r\n    const [selectedItem, setSelectedItem] = useState(0)\r\n    const [sortBy, setSortBy] = useState(true);\r\n    const [winnerPos, setWinnerPos] = useState([])\r\n\r\n    const handleClickSortBy = () => {\r\n        setSortBy(!sortBy)\r\n    }\r\n\r\n    // useEffect(() => {\r\n    //     console.log(\"histor\", history);\r\n    // }, [history])\r\n\r\n    const calculateWinner = (squares, LEN, lastCheck) => {\r\n      \r\n        if(lastCheck && lastCheck.length>0)\r\n        {\r\n            console.log(\"lasf\", lastCheck,squares);\r\n            const lines = [];\r\n            const symbol = squares[lastCheck[1]*LEN + lastCheck[0]]\r\n            console.log(\"asf\",symbol);\r\n            //kiem tra dong\r\n            let dong = {\r\n                arr:[lastCheck[1]*LEN + lastCheck[0]],\r\n                num: 0\r\n            }\r\n            for(let i = lastCheck[0] +1 ; i < LEN; i++) \r\n            {\r\n                if(squares[lastCheck[1]*LEN + i]===symbol)\r\n                {\r\n                    dong.num = dong.num + 1;\r\n                    dong.arr.push(lastCheck[1]*LEN + i)\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n            }\r\n            for(let i = lastCheck[0] -1 ; i >= 0; i--) \r\n            {\r\n                if(squares[lastCheck[1]*LEN + i]===symbol)\r\n                {\r\n                    dong.num = dong.num + 1;\r\n                    dong.arr.push(lastCheck[1]*LEN + i)\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n            }\r\n            if(dong.num>=4)\r\n            {\r\n                console.log(\"dong\",dong, symbol);\r\n                return [symbol,dong.arr]\r\n            }\r\n\r\n            //kiem tra cot\r\n            let cot = {\r\n                arr:[lastCheck[1]*LEN + lastCheck[0]],\r\n                num: 0\r\n            }\r\n            for(let i = lastCheck[1] + 1 ; i < LEN; i++) \r\n            {\r\n                if(squares[i*LEN + lastCheck[0]]===symbol)\r\n                {\r\n                    cot.num = cot.num + 1;\r\n                    cot.arr.push(i*LEN + lastCheck[0])\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n            }\r\n            for(let i = lastCheck[1] -1  ; i >=0; i--) \r\n            {\r\n                if(squares[i*LEN + lastCheck[0]]===symbol)\r\n                {\r\n                    cot.num = cot.num + 1;\r\n                    cot.arr.push(i*LEN + lastCheck[0])\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n            }\r\n            if(cot.num>=4)\r\n            {\r\n                console.log(\"dong\",cot, symbol);\r\n                return [symbol,cot.arr]\r\n            }\r\n\r\n            //kiem tra cheo chinh\r\n            let cheochinh = {\r\n                arr:[lastCheck[1]*LEN + lastCheck[0]],\r\n                num: 0\r\n            }\r\n            for(let i = 1  ; i < LEN ; i++) \r\n            {\r\n                if(lastCheck[0]+ i > LEN -1 || lastCheck[1]+ i > LEN -1)\r\n                {\r\n                    break;\r\n                }                 \r\n                if(squares[(lastCheck[1]+ i)*LEN + lastCheck[0] + i] ===symbol)\r\n                {\r\n                    cheochinh.num = cheochinh.num + 1;\r\n                    cheochinh.arr.push((lastCheck[1]+ i)*LEN + lastCheck[0] + i)\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n            }\r\n            for(let i = 1  ; i < LEN ; i++) \r\n            {\r\n                if(lastCheck[0] - i < 0 || lastCheck[1] - i < 0)\r\n                {\r\n                    break;\r\n                }                 \r\n                if(squares[(lastCheck[1] - i)*LEN + lastCheck[0] -  i] ===symbol)\r\n                {\r\n                    cheochinh.num = cheochinh.num + 1;\r\n                    cheochinh.arr.push((lastCheck[1] - i)*LEN + lastCheck[0] -  i)\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n            }\r\n            if(cheochinh.num>=4)\r\n            {\r\n                console.log(\"dong\",cheochinh, symbol);\r\n                return [symbol,cheochinh.arr]\r\n            }\r\n\r\n\r\n            //kiem tra cheo phu\r\n            let cheophu = {\r\n                arr:[lastCheck[1]*LEN + lastCheck[0]],\r\n                num: 0\r\n            }\r\n            for(let i = 1  ; i < LEN ; i++) \r\n            {\r\n                if(lastCheck[0] + i > LEN -1 || lastCheck[1] - i < 0)\r\n                {\r\n                    break;\r\n                }                 \r\n                if(squares[(lastCheck[1] - i)*LEN + lastCheck[0] +  i] ===symbol)\r\n                {\r\n                    cheophu.num = cheophu.num + 1;\r\n                    cheophu.arr.push((lastCheck[1] - i)*LEN + lastCheck[0] +  i)\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n            }\r\n            for(let i = 1  ; i < LEN ; i++) \r\n            {\r\n                if(lastCheck[0] - i < 0 || lastCheck[1] + i > LEN -1)\r\n                {\r\n                    break;\r\n                }                 \r\n                if(squares[(lastCheck[1] + i)*LEN + lastCheck[0] -  i] ===symbol)\r\n                {\r\n                    cheophu.num = cheophu.num + 1;\r\n                    cheophu.arr.push((lastCheck[1] + i)*LEN + lastCheck[0] -  i)\r\n                }\r\n                else{\r\n                    break;\r\n                }\r\n            }\r\n            if(cheophu.num>=4)\r\n            {\r\n                console.log(\"dong\",cheophu, symbol);\r\n                return [symbol,cheophu.arr]\r\n            }\r\n\r\n\r\n\r\n\r\n        }\r\n        \r\n\r\n\r\n        // for(let i=0;i<LEN;i++)\r\n        // {\r\n        //   let t = [];\r\n        //   for(let j=0;j<LEN;j++)\r\n        //   {\r\n        //     t.push(i*LEN+j);\r\n        //   }\r\n        //   lines.push(t)\r\n        // }\r\n      \r\n        // for(let i=0;i<LEN;i++)\r\n        // {\r\n        //   let t = [];\r\n        //   for(let j=0;j<LEN;j++)\r\n        //   {\r\n        //     t.push(j*LEN+i);\r\n        //   }\r\n        //   lines.push(t)\r\n        // }\r\n      \r\n        // let t1 =[]\r\n        // let t2 = []\r\n        // for(let i=0;i<LEN;i++)\r\n        // {\r\n        //   t1.push(i*(LEN+1))\r\n        //   t2.push((i+1)*(LEN-1))\r\n        // }\r\n      \r\n        // lines.push(t1);\r\n        // lines.push(t2);\r\n      \r\n        // for (let i = 0; i < lines.length; i++) {\r\n      \r\n        //   let flag =0;\r\n        //   for(let j = 0;j <LEN; j++ )\r\n        //   {\r\n        //     if(j===0)\r\n        //     {\r\n        //       if (!squares[lines[i][0]]) flag=1;\r\n        //     }\r\n        //     else{\r\n        //       if (squares[lines[i][0]] !== squares[lines[i][j]]) flag=1;\r\n        //     }\r\n        //   }\r\n      \r\n        //   if(flag===0){\r\n        //     return [squares[lines[i][0]],lines[i]];\r\n        //   }\r\n        //   // if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            \r\n        //   //   return [squares[a],lines[i]];\r\n        //   // }\r\n        // }\r\n        return null;\r\n      }\r\n\r\n    const handleClick = (i) => {\r\n        const historyTemp = history.slice(0, stepNumber + 1);\r\n        const current = historyTemp[historyTemp.length - 1];\r\n        const squares = current.squares.slice();\r\n        if (calculateWinner(squares, LEN, current.latestCheck) || squares[i]) {\r\n            return;\r\n        }\r\n        squares[i] = xIsNext ? \"X\" : \"O\";\r\n        setHistory(historyTemp.concat([\r\n            {\r\n                squares: squares,\r\n                latestCheck: [i % LEN, Math.floor(i / LEN)]\r\n            }\r\n        ]))\r\n        setStepNumber(historyTemp.length);\r\n        setXIsNext(!xIsNext)\r\n        setSelectedItem(selectedItem + 1)\r\n\r\n    }\r\n\r\n    const jumpTo = (step) => {\r\n        setStepNumber(step);\r\n        setXIsNext((step % 2) === 0)\r\n    }\r\n\r\n    const handleSelectItem = (i) => {\r\n        jumpTo(i);\r\n        setSelectedItem(i);\r\n        setWinnerPos([]);\r\n    }\r\n\r\n    const current = history[stepNumber];\r\n    const winner = calculateWinner(current.squares, LEN, current.latestCheck);\r\n\r\n\r\n    const moves = history.map((step, move) => {\r\n        const desc = move ?\r\n            'Go to move #' + move + \". Position :(\" + step.latestCheck.toString() + \")\" :\r\n            'Go to game start';\r\n        return (\r\n            <li key={move}>\r\n                <button onClick={() => { handleSelectItem(move) }} className={selectedItem === move ? \"bold-text\" : \"\"}>{desc}</button>\r\n            </li>\r\n        );\r\n    });\r\n\r\n    let status;\r\n    if (winner) {\r\n        status = \"Winner: \" + winner[0];\r\n        if (winnerPos.length === 0) {\r\n            setWinnerPos(winner[1]);\r\n        }\r\n    } else {\r\n        if (history.length <= LEN * LEN) status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n        else status = \"The game result is a draw \";\r\n    }\r\n\r\n    const handleSetLen = e => {\r\n        if(e.target.value >=5)\r\n        {\r\n            setLEN(e.target.value);\r\n        }\r\n        else{\r\n            alert(\"size should not be less than 5 value\")\r\n        }\r\n    }\r\n\r\n    const handlePlayAgain = () => {\r\n        setStepNumber(0)\r\n        setWinnerPos([]);\r\n        setHistory([\r\n            {\r\n                squares: Array(LEN * LEN).fill(null),\r\n                latestCheck: []\r\n    \r\n            }\r\n        ])\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"game\">\r\n            <div className=\"menu\">\r\n                <button className=\"button-play-again\" onClick={handlePlayAgain}>Play again</button>\r\n                { history.length ===1 ? <div className=\"set\">\r\n                    <label>Set size of the board</label>\r\n                    <div><input type=\"number\" value={LEN} onChange={handleSetLen}/></div>\r\n                </div>\r\n                :\r\n                <div>\r\n                     <label>Size of the board</label>\r\n                    <div><input type=\"number\" value={LEN} onChange={handleSetLen} readOnly/></div>\r\n                </div>\r\n                }\r\n               \r\n            </div>\r\n            <div className=\"game-board\">\r\n            <div className=\"status-game\">{status}</div>\r\n                <Board\r\n                    squares={current.squares}\r\n                    winnerPos={winnerPos}\r\n                    onClick={i => handleClick(i)}\r\n                    LEN = {LEN}\r\n                />\r\n            </div>\r\n            <div className=\"game-info\">\r\n                <button onClick={handleClickSortBy}>{sortBy ? \"Ascending\" : \"Descending\"}</button>\r\n                <ol>{sortBy ? moves : moves.reverse()}</ol>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n  \r\n\r\nexport default Game;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './component/Game';\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));"],"sourceRoot":""}